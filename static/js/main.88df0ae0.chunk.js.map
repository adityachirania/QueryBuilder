{"version":3,"sources":["consts.tsx","Components/FilterForm.tsx","Components/GroupFilters.tsx","Utils.tsx","Components/QueryString.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["predictionFields","commonFields","conditions","criterias","FilterForm","props","className","name","id","onChange","event","rule","rules","field","target","value","handleEditFilter","group_idx","idx","disabled","selected","hidden","label","map","condition","Group","blankFilter","type","group","children","onClick","handleAddFilter","JSON","parse","stringify","queryBuilder","groupFilters","AND","query","forEach","group_symbol","length","not","symbol","conjunction","getRuleString","QueryString","state","blankGroup","blankGroupList","App","handleGroupCombine","setState","filter","groups","slice","push","handleAddGroup","handleConjunction","conjuction","console","log","handleNot","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88df0ae0.chunk.js","sourcesContent":["// Ideally this can be recieved from the backend incase of more fields\nexport const predictionFields : string []  = [\"Theme\", 'Sub-theme', 'Reason', 'Language', 'Source','Rating', 'Time Period']\nexport const commonFields : string []  = ['Customer ID']\nexport const conditions : string [] = ['Equals', 'Does not equal', 'Like', 'Not like', 'Is Empty', 'Is', 'Is not']\nexport const criterias : string [] = ['Offers' , 'Performance' , 'Platform' , 'Product Feedback']\n\n","import React from 'react';\nimport \"./FilterForm.css\"\nimport { predictionFields, commonFields, conditions, criterias } from '../consts';\n\nfunction FilterForm(props: any) {\n\n  \n  const handleFieldChange = (event: any) => {\n    const rule = props.rules;\n    rule.field = event.target.value;\n    props.handleEditFilter(rule,props.group_idx,props.idx);\n  }\n  const handleConditionChange = (event: any) => {\n    const rule = props.rules;\n    rule.condition = event.target.value;\n    props.handleEditFilter(rule,props.group_idx,props.idx);\n  }\n  const handleCriteriaChange = (event: any) => {\n    const rule = props.rules;\n    rule.value = event.target.value;\n    props.handleEditFilter(rule,props.group_idx,props.idx);\n  }\n\n  return (\n    <div className=\"FilterForm\">\n      <select className=\"dropdown\" name=\"Field\" id=\"Field\" onChange={handleFieldChange}>\n        <option value='None' disabled selected hidden>Select Field</option>\n        <optgroup label=\"Prediction\">\n          {\n            predictionFields.map(field => {\n              return (\n                <option value={field}>{field}</option>\n              )\n            })\n          }\n        </optgroup>\n        <optgroup label=\"Common\">\n          {\n            commonFields.map(field => {\n              return (\n                <option value={field}>{field}</option>\n              )\n            })\n          }\n        </optgroup>\n      </select>\n\n      <select className=\"dropdown\" name=\"Condition\" id=\"Condition\" onChange={handleConditionChange}>\n        <option value='None' disabled selected hidden>Select Condition</option>\n        <optgroup label=\"Prediction\">\n          {\n            conditions.map(field => {\n              return (\n                <option value={field}>{field}</option>\n              )\n            })\n          }\n        </optgroup>\n      </select>\n\n      <select className=\"dropdown\" name=\"Value\" id=\"Value\" onChange={handleCriteriaChange}>\n        <option value='None' disabled selected hidden>Select Value</option>\n          {\n            criterias.map(field => {\n              return (\n                <option value={field}>{field}</option>\n              )\n            })\n          }\n      </select>\n    </div>\n  )\n}\nexport default FilterForm;","import React from 'react';\nimport { Rule } from '../Rules';\nimport FilterForm from './FilterForm'\nimport './GroupFilters.css'\n\n\nfunction Group(props: any) {\n    const blankFilter: Rule = {\n        field: 'None',\n        condition: 'None', \n        value: 'None',\n        type: 'rule'\n    }\n    \n    return (     \n        <div>       \n            {props.group.children.map((rule: Rule,idx: number) => {\n                return(\n                  <FilterForm \n                    rules = {rule} \n                    handleEditFilter={props.handleEditFilter} \n                    group_idx={props.idx} \n                    idx = {idx}\n                  />\n                );\n            })}\n            <button className=\"Button\" onClick = {()=>props.handleAddFilter(JSON.parse(JSON.stringify(blankFilter)), props.idx)}>Add filter</button>\n        </div>   \n    );         \n}\n\nexport default Group;\n  ","import { Rule,RuleGroup } from \"./Rules\";\n\nexport type MyState = {\n    groupFilters: RuleGroup[], \n    AND: 'AND' | 'OR',\n}\n\nexport function getRuleString(rule: Rule) {\n    let query : string = \"\";\n    query = \" ( \" + query + \"field.\" + rule.field;\n    query = query + \" \" + rule.condition + \" \";\n    query = query + rule.value + \" ) \";\n    return query;\n}\n\nexport function queryBuilder(props: MyState) {\n    const groupFilters = props.groupFilters;\n    const AND = props.AND;\n    let query: string = \" ( \";\n\n    groupFilters.forEach((group:any,group_idx: number) => {\n\n        const group_symbol: string = (AND === 'AND' ? \"&&\" : \"||\");\n\n        if(group.children.length > 1) {\n            // NOT if set to true\n            if(group.not === true) \n                query = query + '!';\n\n            query = query + \" ( \";\n            const symbol = (group.conjunction === 'AND' ? \"&&\" : \"||\")\n            group.children.forEach((rule: Rule,idx: number) => {\n                if(idx < group.children.length - 1) {\n                    query = query + getRuleString(rule);\n                    if(idx < group.children.length - 2) {\n                        query = query + symbol;\n                    }\n                }\n            })\n            query = query + \" ) \";\n        }\n\n        // Add conjunction until penultimate group\n        if(group_idx < groupFilters.length - 2) {\n            query = query + group_symbol;\n        }\n\n        // Add conjunction only if ultimate group has atleast one filled filter\n        if(group_idx === groupFilters.length - 2 && groupFilters[group_idx+1].children.length > 1) {\n            query = query + group_symbol;\n        }\n    })\n    query = query + \" ) \";\n    return query;\n}\n","import React from 'react';\nimport { queryBuilder } from '../Utils'\n\n\nfunction QueryString(props: any) {\n    \n    return (     \n        <div>   \n            Query: {queryBuilder(props.state)}\n        </div>   \n    );         \n}\n\nexport default QueryString;\n  ","import React from 'react';\nimport {Rule,RuleGroup} from './Rules'\nimport Group from './Components/GroupFilters'\nimport QueryString from './Components/QueryString'\nimport './App.css';\n\nconst blankFilter: Rule = {\n  field: 'None',\n  condition: 'None', \n  value: 'None',\n  type: 'rule'\n}\n\nconst blankGroup: RuleGroup = {\n  children: [JSON.parse(JSON.stringify(blankFilter))],\n  conjunction: \"AND\",\n  not: false,\n  type: 'rule_group',\n};\n\nconst blankGroupList: (RuleGroup)[] = [JSON.parse(JSON.stringify(blankGroup))];\n\ntype MyState = {\n  groupFilters: RuleGroup[], \n  AND: 'AND' | 'OR',\n}\n\n\nclass App extends React.Component<Record<string, never>, MyState> {\n\n  state : MyState = {\n    groupFilters: [...blankGroupList],\n    AND: 'AND'\n  };\n\n  handleGroupCombine = (event: any) => {\n    this.setState({AND: (event.target.value==='AND' ? 'AND' : 'OR')});\n  } \n\n  handleEditFilter = (filter: Rule, group_idx: number, idx: number) =>  {\n    const groups = this.state.groupFilters;\n    groups[group_idx].children[idx] = JSON.parse(JSON.stringify(filter));\n    this.setState({groupFilters: groups});\n  };\n \n  handleAddFilter = (filter: Rule, idx: number) =>  {\n    // only if filters are filled\n    if(\n        this.state.groupFilters[idx].children.slice(-1)[0].field !== 'None' &&\n        this.state.groupFilters[idx].children.slice(-1)[0].value !== 'None' &&\n        this.state.groupFilters[idx].children.slice(-1)[0].condition !== 'None'\n    )\n    {\n      const groups = this.state.groupFilters;\n      groups[idx].children.push(filter);\n      this.setState({groupFilters: groups});\n    }\n  };\n  \n  handleAddGroup = (group: RuleGroup) =>  {\n    // only if previous group has any filters\n    if(this.state.groupFilters.slice(-1)[0].children.length > 1)\n    {\n      const groups = this.state.groupFilters;\n      groups.push(group);\n      this.setState({groupFilters: groups});\n    }\n  };\n  \n  handleConjunction = (conjuction: ('AND' | 'OR'),  idx: number) =>  {\n    const groups = this.state.groupFilters;\n    console.log(groups[idx]);\n    groups[idx].conjunction = conjuction;\n    this.setState({groupFilters: groups});\n  };\n\n  handleNot = (idx: number) =>  {\n    const groups = this.state.groupFilters;\n    groups[idx].not = !(this.state.groupFilters[idx].not);\n    this.setState({groupFilters: groups});\n  };\n\n  render() {\n    return (\n      <div>\n          <div className=\"query\">\n            <QueryString state = {this.state} />\n          </div>\n          <div className = \"QueryBuilder\">\n            <select className=\"Conjunction\" name=\"Join\" id=\"Join\" onChange =  {this.handleGroupCombine}>\n                      <option value=\"AND\">AND</option>\n                      <option value=\"OR\">OR</option>\n            </select>\n            {\n              this.state.groupFilters.map((group : RuleGroup,idx : number) => {\n                return(\n                  <div className=\"GroupBlock\">\n                    <select className=\"Conjunction\" name=\"Join\" id=\"Join\" onChange =  {(event)=>this.handleConjunction((event.target.value==='AND' ? 'AND' : 'OR'),idx)}>\n                      <option value=\"AND\">AND</option>\n                      <option value=\"OR\">OR</option>\n                    </select>\n                    <label> NOT: <input type=\"checkbox\" id=\"NOT\" name=\"NOT\" value=\"NOT\" onClick = {()=>this.handleNot(idx)}/></label>\n                    \n                    <Group \n                      group = {group} \n                      handleAddFilter = {this.handleAddFilter} \n                      handleEditFilter ={this.handleEditFilter} \n                      idx = {idx}\n                    />\n                  </div>\n                );\n              })\n            }\n            \n          <button \n            className=\"Button\"\n            onClick = \n              {()=>this.handleAddGroup(JSON.parse(JSON.stringify(blankGroup)))}>\n                Add new group list\n          </button>\n          <button \n            className=\"Button\"\n          >\n              Finish\n          </button>\n\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}